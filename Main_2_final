import java.util.*;


public class Exercise
{
	public static void main(String a[])
	{

		final String[] occuringWordsArray = getOccurringWords(getString());

		System.out.println(Arrays.toString(occuringWordsArray));
	}

	private static String getString()
	{
		//in case user input is required
		String str = null;
		/*Scanner myObj = new Scanner(System.in);
		System.out.println("Enter string ");
		str = myObj.nextLine();*/

		//In case user input required, please comment following strings
		//str = "In a village of La Mancha, the name of which I have no desire to call to mind, there lived not long since one of those gentlemen that keep a lance in the lance-rack, an old buckler, a lean hack, and a greyhound for coursing. An olla of rather more beef than mutton, a salad on most nights, scraps on Saturdays, lentils on Fridays, and a pigeon or so extra on Sundays, made away with three-quarters of his income.";
		//str = "e e e e DDD ddd DdD: ddd ddd aa aA Aa, bb cc cC e e e";
		 str = "  //wont won't won't";
		//str = " ";

		return str;
	}

	public static String[] getOccurringWords(final String st)
	{


		final List<String> occuringWordsList = new ArrayList<>(3);
		final Map<String, Integer> duplicates = new TreeMap<>();

		final StringTokenizer token = new StringTokenizer(st," //");

		while (token.hasMoreElements())
		{
			String str = ((String) token.nextElement()).trim().toLowerCase();

			if (duplicates.containsKey(str))
			{
				duplicates.put(str, duplicates.get(str) + 1);

			}
			else
			{
				duplicates.put(str, 1);

			}
		}

		if (!duplicates.isEmpty())
		{
			if (duplicates.size() >= 3)
			{
				handleIfDuplicatesMoreThanThree(duplicates, occuringWordsList);
			}
			else
			{
				handleIfUniqueLessThanThree(duplicates, occuringWordsList);
			}
		}


		return Arrays.copyOf(occuringWordsList.toArray(), occuringWordsList.size(), String[].class);
	}

	private static void handleIfDuplicatesMoreThanThree(final Map<String, Integer> duplicates,
			final List<String> occuringWordsList)
	{
		for (int i = 0; i <= 2; i++)
		{
			Integer d = Collections.max(duplicates.values());
			Map.Entry<String, Integer> entryKey = getMatchingEntry(duplicates);
			//If more than 3 or 3 duplicates found then ignore the unique(words which got 1 occurance)
			if (d == 1)
			{
				break;
			}
			occuringWordsList.add(entryKey.getKey());
			duplicates.remove(entryKey.getKey());
		}
	}

	private static void handleIfUniqueLessThanThree(final Map<String, Integer> duplicates, final List<String> occuringWordsList)
	{
		for (int i = 0; i <= duplicates.size(); i++)
		{
			Integer d = Collections.max(duplicates.values());
			Map.Entry<String, Integer> entryKey = getMatchingEntry(duplicates);
			occuringWordsList.add(entryKey.getKey());
			duplicates.remove(entryKey.getKey());

		}
	}

	private static Map.Entry<String, Integer> getMatchingEntry(final Map<String, Integer> duplicates)
	{
		Integer d = Collections.max(duplicates.values());
		Map.Entry<String, Integer> matchingEntries = duplicates.entrySet().stream().filter(entry -> d.equals(entry.getValue()))
				.findFirst().get();
		return matchingEntries;
	}
}
